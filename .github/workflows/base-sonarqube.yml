name: Base SonarCloud Analysis

on:
  workflow_call:
    inputs:
      service:
        required: true
        type: string
      project_key:
        required: true
        type: string
      project_dll:
        required: true
        type: string
    secrets:
      sonar_token:
        required: true

jobs:
  analyze:
    runs-on: windows-latest

    defaults:
      run:
        working-directory: ./services/${{ inputs.service }}/

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Setup Docker
        uses: docker/setup-docker-action@v4.3.0

      - name: Begin SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.sonar_token }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin `
            /k:"${{ inputs.project_key }}" `
            /o:"cardosakv" `
            /d:sonar.token="${{ secrets.sonar_token }}" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:"sonar.cs.opencover.reportsPaths=**/TestResults/Merged/coverage.opencover.xml" `

      - name: Restore and build
        shell: powershell
        run: |
          dotnet restore
          dotnet build --no-restore --configuration Release

      - name: Install Coverlet CLI
        shell: powershell
        run: dotnet tool install --global coverlet.console

      - name: Run unit and integration tests with OpenCover coverage
        shell: powershell
        run: |
          coverlet ./${{ inputs.project_dll }}.UnitTests/bin/Release/net8.0/${{ inputs.project_dll }}.UnitTests.dll `
            --target "dotnet" `
            --targetargs "test ./${{ inputs.project_dll }}.UnitTests/${{ inputs.project_dll }}.UnitTests.csproj --no-build --configuration Release" `
            --format opencover `
            --output "./TestResults/unit.coverage.opencover.xml"

          coverlet ./${{ inputs.project_dll }}.IntegrationTests/bin/Release/net8.0/${{ inputs.project_dll }}.IntegrationTests.dll `
            --target "dotnet" `
            --targetargs "test ./${{ inputs.project_dll }}.IntegrationTests/${{ inputs.project_dll }}.IntegrationTests.csproj --no-build --configuration Release" `
            --format opencover `
            --output "./TestResults/integration.coverage.opencover.xml"

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Merge coverage reports
        run: |
          reportgenerator `
            -reports:"./TestResults/*.coverage.opencover.xml" `
            -targetdir:"./TestResults/Merged" `
            -reporttypes:Opencover

      - name: End SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.sonar_token }}
        shell: powershell
        run: .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.sonar_token }}"