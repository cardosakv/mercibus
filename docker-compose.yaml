services:
  gateway:
    build:
      context: ./gateway/
      dockerfile: Gateway/Dockerfile
    container_name: gateway-container
    ports:
      - "9000:8080"
    restart: always

  auth-service:
    build:
      context: ./services/auth/
      dockerfile: Auth.Api/Dockerfile
    container_name: auth-service-container
    ports:
      - "9001:8080"
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__DefaultConnection: ${AUTH_DB_CONN}
      ConnectionStrings__BlobStorageConnection: ${BLOB_CONN}
      Jwt__PrivateKeyPath: ${JWT_PRIV_KEY_PATH}
      Jwt__PublicKeyPath: ${JWT_PUB_KEY_PATH}
      Jwt__Issuer: ${JWT_ISSUER}
      Jwt__Audience: ${JWT_AUDIENCE}
      Jwt__ExpireSeconds: ${JWT_EXPIRY_SECONDS}
      Email__Server: ${EMAIL_SERVER}
      Email__Port: ${EMAIL_PORT}
      Email__Sender: ${EMAIL_SENDER}
      Email__Username: ${EMAIL_USERNAME}
      Email__Password: ${EMAIL_PASSWORD}
      RedirectUrl__EmailConfirmSuccess: ${EMAIL_CONFIRM_SUCCESS}
      RedirectUrl__EmailConfirmFail: ${EMAIL_CONFIRM_FAIL}
      RedirectUrl__PasswordReset: ${PASSWORD_RESET_URL}
    volumes:
      - ./services/auth/Auth.Api/jwt_priv_key.pem:/app/jwt_priv_key.pem
      - ./services/auth/Auth.Api/jwt_pub_key.pem:/app/jwt_pub_key.pem
    depends_on:
      - auth-db
    restart: always

  auth-db:
    image: postgres:latest
    container_name: auth-db-container
    ports:
      - "8001:5432"
    environment:
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASS}
      POSTGRES_DB: ${AUTH_DB_NAME}
    volumes:
      - auth_db_data:/var/lib/postgresql/data
    restart: always

  catalog-service:
    build:
      context: ./services/catalog/
      dockerfile: Catalog.Api/Dockerfile
    container_name: catalog-service-container
    ports:
      - "9002:8080"
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__DefaultConnection: ${CATALOG_DB_CONN}
      ConnectionStrings__BlobStorageConnection: ${BLOB_CONN}
      ConnectionStrings__RedisConnection: ${REDIS_CONN}
      Jwt__Issuer: ${JWT_ISSUER}
      Jwt__Audience: ${JWT_AUDIENCE}
      Jwt__Authority: http://auth-service:8080
      RabbitMq__Host: rabbitmq
      RabbitMq__Username: ${RABBITMQ_USER}
      RabbitMq__Password: ${RABBITMQ_PASS}
    depends_on:
      - catalog-db
      - redis
      - rabbitmq
      - blob-storage
    restart: always

  catalog-db:
    image: postgres:latest
    container_name: catalog-db-container
    ports:
      - "8002:5432"
    environment:
      POSTGRES_USER: ${CATALOG_DB_USER}
      POSTGRES_PASSWORD: ${CATALOG_DB_PASS}
      POSTGRES_DB: ${CATALOG_DB_NAME}
    volumes:
      - catalog_db_data:/var/lib/postgresql/data
    restart: always
    
  order-service:
    build:
      context: ./services/orders/
      dockerfile: Orders.Api/Dockerfile
    container_name: order-service-container
    ports:
      - "9003:8080"
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__DefaultConnection: ${ORDER_DB_CONN}
      ConnectionStrings__MongoConnection: ${ORDER_MONGO_CONN}
      Jwt__Issuer: ${JWT_ISSUER}
      Jwt__Audience: ${JWT_AUDIENCE}
      Jwt__Authority: http://auth-service:8080
      RabbitMq__Host: rabbitmq
      RabbitMq__Username: ${RABBITMQ_USER}
      RabbitMq__Password: ${RABBITMQ_PASS}
    depends_on:
      - order-db
      - order-mongo
      - rabbitmq
    restart: always
  
  order-db:
    image: postgres:latest
    container_name: order-db-container
    ports:
      - "8003:5432"
    environment:
      POSTGRES_USER: ${ORDER_DB_USER}
      POSTGRES_PASSWORD: ${ORDER_DB_PASS}
    volumes:
      - order_db_data:/var/lib/postgresql/data
    restart: always
    
  order-mongo:
    image: mongo:latest
    container_name: order-mongo-container
    ports:
      - "8004:27017"
    environment:
      MONGO_INITDB_DATABASE: order-products
    volumes:
      - order_mongo_data:/data/db
    restart: always
    
  payment-service:
    build:
      context: ./services/payments/
      dockerfile: Payments.Api/Dockerfile
    container_name: payment-service-container
    ports:
      - "9004:8080"
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__DefaultConnection: ${PAYMENT_DB_CONN}
      Jwt__Issuer: ${JWT_ISSUER}
      Jwt__Audience: ${JWT_AUDIENCE}
      Jwt__Authority: http://auth-service:8080
      RabbitMq__Host: rabbitmq
      RabbitMq__Username: ${RABBITMQ_USER}
      RabbitMq__Password: ${RABBITMQ_PASS}
      Xendit__ApiKey: ${XENDIT_API_KEY}
    depends_on:
      - payment-db
      - rabbitmq
    restart: always
    
  payment-db:
    image: postgres:latest
    container_name: payment-db-container
    ports:
      - "8005:5432"
    environment:
      POSTGRES_USER: ${PAYMENT_DB_USER}
      POSTGRES_PASSWORD: ${PAYMENT_DB_PASS}
      POSTGRES_DB: ${PAYMENT_DB_NAME}
    volumes:
      - payment_db_data:/var/lib/postgresql/data
    restart: always

  blob-storage:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: blob-storage-container
    command: azurite-blob --blobHost 0.0.0.0 --skipApiVersionCheck
    ports:
      - "10000:10000"
    volumes:
      - blob_storage_data:/data
    restart: always
  
  redis:
    image: redis/redis-stack:latest
    container_name: redis-container
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    
  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq-container
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: always

  consul:
    image: hashicorp/consul:latest
    container_name: consul-container
    ports:
      - "8500:8500"
    volumes:
      - ./gateway/Gateway/Consul:/consul/config
    restart: always
    
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-container
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: always
    
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-container
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    restart: always

volumes:
  auth_db_data:
  catalog_db_data:
  order_db_data:
  order_mongo_data:
  payment_db_data:
  blob_storage_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data: